From patchwork Fri Feb 22 16:27:44 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Paolo Bonzini <pbonzini@redhat.com>
X-Patchwork-Id: 10826555
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id E53D31575
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Feb 2019 16:27:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D2F4B313C6
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Feb 2019 16:27:54 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C73EE315BD; Fri, 22 Feb 2019 16:27:54 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.7 required=2.0 tests=BAYES_00,DKIM_INVALID,
	DKIM_SIGNED,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C01CF313C6
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Feb 2019 16:27:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727338AbfBVQ1u (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 22 Feb 2019 11:27:50 -0500
Received: from mail-wm1-f68.google.com ([209.85.128.68]:50332 "EHLO
        mail-wm1-f68.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727275AbfBVQ1t (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 22 Feb 2019 11:27:49 -0500
Received: by mail-wm1-f68.google.com with SMTP id x7so2507189wmj.0
        for <kvm@vger.kernel.org>; Fri, 22 Feb 2019 08:27:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=sender:from:to:cc:subject:date:message-id;
        bh=n+/VFBkVylHklSQSHG3Ke/ShOw+Jc8ld0z/vMpAC0Do=;
        b=QFbvPkPv7u/ljWLnyxHhtLfuijFsbkb69azIIvL9lSWYsZK/hoLBSGb4XxaTDueUC4
         HNFFA3fWodTrOgO+gf313z2c5qe/3jWFwrE3UGDYHEsNnFI8iE7BkOUFLQGbw7PelmlE
         66rM8Q0Z6Fbq94CZiW2FJ87QdhcQ94wXQOi0rCie8/adoiLOUqXeAn931aWSMIP6c67J
         RgBa3XyG3H5RpuhmETCcOolGy9DsbdC6rjxeZDuLi4ghtzH1DJOWegXvE/FqL8MdJT6i
         aFgkdijQTuunj2JCpiGJjWkhC80+l38KlZcNnudotr0RP6mOiVlIHOnRruUei/WLVISC
         tyqw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:sender:from:to:cc:subject:date:message-id;
        bh=n+/VFBkVylHklSQSHG3Ke/ShOw+Jc8ld0z/vMpAC0Do=;
        b=uHglmUtGmmAlscmaftXGvAx6XmryDbkQ5LYJrCqCWgNzH+JgBFJFobnjLnFk/gEC02
         LnypnafhCxfYeGnIunu5vh1ODz/NpA6j0WEwfa6US7ytGXG7PNxARC0fSMs8Jq0p9EN0
         CV/xRWn5h1r8dbt2OFH0L2XH+Z3a4UlbOmw9rnpvbEdfZTolTcFL66ADq1gd3wauk/+I
         1spd5YXtRnpJzHXyQpm8RXXiEST/7dbjLBmBQq/cqFQacnPS5b6iQIFxpymGMKuAGwaz
         UvZlw6e/oV5PtNC7lChbRwJ0obidP/4W8KyMRrvFPvwweSEJb2geXkBj0xkIfhQW12O5
         43hg==
X-Gm-Message-State: AHQUAuYXG2VGhsuDdNtrcG5Fsf+G2iGYLhfIf4wA6ulEd3Xy0L5CjLhQ
        dkdSRTM3OLKarhJtATDOerZYuPyZ
X-Google-Smtp-Source: 
 AHgI3IYhoyJ9BCTzAOKfXoK+7ZfSgJvICnoTlLvtKAyLOvcCQHzbsoMCAUgGov9cMho1uYIpADCwgg==
X-Received: by 2002:a7b:c419:: with SMTP id k25mr3006286wmi.34.1550852866665;
        Fri, 22 Feb 2019 08:27:46 -0800 (PST)
Received: from 640k.lan ([93.56.166.5])
        by smtp.gmail.com with ESMTPSA id
 f134sm1937858wme.31.2019.02.22.08.27.45
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 22 Feb 2019 08:27:45 -0800 (PST)
From: Paolo Bonzini <pbonzini@redhat.com>
To: kvm@vger.kernel.org
Cc: Stefan Raspl <raspl@linux.ibm.com>
Subject: [PATCH kvm-unit-tests v3] tap13: list testcases individually
Date: Fri, 22 Feb 2019 17:27:44 +0100
Message-Id: <1550852864-56308-1-git-send-email-pbonzini@redhat.com>
X-Mailer: git-send-email 1.8.3.1
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Stefan Raspl <raspl@linux.ibm.com>

The current tap13 support summarizes testcases on a rather coarse
granularity. Which sort of defeats the purpose, especially in CI
environments, where having results for individual tests to pinpoint
problems helps a lot.

To improve things, this patch makes TAP mode bypass print_result and extract
results for individual testcases as they are sent to the log file.  It then
introduces test case numbers and writes the plan at the end.

One could argue that post-processing the logs is a rather fragile approach.
Which is true - but apparently already the case, see e.g. extract_summary
in scripts/runtime.bash. Plus this is quite cheap, while a proper solution
would require to modify the kernels, so we can e.g. pass in a counter for
the test case number. And we would probably have to come up with reasonable
test case names, while this approach simply derives them from each test
output.

Before:
  $ ./run_tests.sh -t
  TAP version 13
  ok selftest-setup
  ok intercept
  ok emulator
  ok sieve
  ok sthyi
  ok skey
  ok diag10
  ok pfmf
  ok cmm
  ok vector
  ok gs # SKIP
  ok iep # SKIP
  1..12

After:
  $ ./run_tests.sh -t
  TAP version 13
  ok 1 - cmm: privileged: Program interrupt: expected(2)
  ok 2 - cmm: invalid ORC 8: Program interrupt: expected(6)
  ok 3 - diag10: lowcore freeing: 0x0000/0x0000: Program interrupt: expected(6)
  ok 4 - diag10: lowcore freeing: 0x1000/0x1000: Program interrupt: expected(6)
  ok 5 - diag10: lowcore freeing: 0x0000/0x1000: Program interrupt: expected(6)
  ok 6 - diag10: start/end: end < start: Program interrupt: expected(6)
  ok 7 - diag10: start/end: unaligned start: Program interrupt: expected(6)
  ok 8 - diag10: start/end: unaligned end: Program interrupt: expected(6)
  ok 9 - diag10: privileged: Program interrupt: expected(2)
  ok 10 - emulator: spm/ipm: cc=0,key=f: bit 32 and 33 set to zero
  ok 11 - emulator: spm/ipm: cc=0,key=f: bit 0-31, 40-63 unchanged
  ok 12 - emulator: spm/ipm: cc=0,key=f: cc and key applied
  ok 13 - emulator: spm/ipm: cc=1,key=9: bit 32 and 33 set to zero
  1..180
  [...]

Signed-off-by: Stefan Raspl <raspl@linux.ibm.com>
[Almost rewritten, but still giving a lot of credit to Stefan. - Paolo]
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
---
 run_tests.sh         | 59 +++++++++++++++++++++++++++++++++++++++++++---------
 scripts/runtime.bash | 19 +++--------------
 2 files changed, 52 insertions(+), 26 deletions(-)

diff --git a/run_tests.sh b/run_tests.sh
index 6b0af19..edfd8a4 100755
--- a/run_tests.sh
+++ b/run_tests.sh
@@ -69,12 +69,50 @@ shift $((OPTIND - 1))
 only_tests="$*"
 
 # RUNTIME_log_file will be configured later
-RUNTIME_log_stderr () { cat >> $RUNTIME_log_file; }
+if [[ $tap_output == "no" ]]; then
+    process_test_output() { cat >> $RUNTIME_log_file; }
+    postprocess_suite_output() { cat; }
+else
+    process_test_output() {
+        CR=$'\r'
+        while read -r line; do
+            line="${line%$CR}"
+            case "${line:0:4}" in
+                PASS)
+                    echo "ok TEST_NUMBER - ${line#??????}" >&3
+                    ;;
+                FAIL)
+                    echo "not ok TEST_NUMBER - ${line#??????}" >&3
+                    ;;
+                SKIP)
+                    echo "ok TEST_NUMBER - ${line#??????} # skip" >&3
+                    ;;
+                *)
+                    ;;
+            esac
+            echo "${line}"
+        done >> $RUNTIME_log_file
+    }
+    postprocess_suite_output() {
+        test_number=0
+        while read -r line; do
+            case "${line}" in
+                ok*|"not ok"*)
+                    (( test_number++ ))
+                    echo "${line/TEST_NUMBER/${test_number}}" ;;
+                *) echo "${line}" ;;
+            esac
+        done
+        echo "1..$test_number"
+    }
+fi
+
+RUNTIME_log_stderr () { process_test_output; }
 RUNTIME_log_stdout () {
     if [ "$PRETTY_PRINT_STACKS" = "yes" ]; then
-        ./scripts/pretty_print_stacks.py $1 >> $RUNTIME_log_file
+        ./scripts/pretty_print_stacks.py $1 | process_test_output
     else
-        cat >> $RUNTIME_log_file
+        process_test_output
     fi
 }
 
@@ -84,7 +122,6 @@ function run_task()
 	if [ -z "$testname" ]; then
 		return
 	fi
-	test_number=$((test_number+1))
 
 	while (( $(jobs | wc -l) == $unittest_run_queues )); do
 		# wait for any background test to finish
@@ -110,15 +147,17 @@ mkdir $unittest_log_dir || exit 2
 echo "BUILD_HEAD=$(cat build-head)" > $unittest_log_dir/SUMMARY
 
 if [[ $tap_output == "yes" ]]; then
-    test_number=0
     echo "TAP version 13"
 fi
+
 trap "wait; exit 130" SIGINT
-for_each_unittest $config run_task
+
+(
+   # preserve stdout so that process_test_output output can write TAP to it
+   exec 3>&1
+   test "$tap_output" == "yes" && exec > /dev/null
+   for_each_unittest $config run_task
+) | postprocess_suite_output
 
 # wait until all tasks finish
 wait
-
-if [[ $tap_output == "yes" ]]; then
-    echo "1..$test_number"
-fi
diff --git a/scripts/runtime.bash b/scripts/runtime.bash
index 2f8026d..200d5b6 100644
--- a/scripts/runtime.bash
+++ b/scripts/runtime.bash
@@ -61,23 +61,10 @@ function print_result()
     local summary="$3"
     local reason="$4"
 
-    if [[ $tap_output == "no" ]]; then
-        if [ -z "$reason" ]; then
-            echo "`$status` $testname $summary"
-        else
-            echo "`$status` $testname ($reason)"
-        fi
-        return
-    fi
-
-    if [[ $status == "FAIL" ]]; then
-        echo "not ok $testname $reason"
-    elif [[ $status == "PASS" ]]; then
-        echo "ok $testname"
-    elif [[ $status == "SKIP" ]]; then
-        echo "ok $testname # SKIP $reason"
+    if [ -z "$reason" ]; then
+        echo "`$status` $testname $summary"
     else
-        echo "not ok # TODO unknown test status"
+        echo "`$status` $testname ($reason)"
     fi
 }
 
