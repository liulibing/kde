From patchwork Thu Mar 14 06:42:52 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Viresh Kumar <viresh.kumar@linaro.org>
X-Patchwork-Id: 10852237
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 7E56613B5
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 14 Mar 2019 06:43:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6D3132A1C2
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 14 Mar 2019 06:43:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5E6E12A1C4; Thu, 14 Mar 2019 06:43:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EDA392A1BF
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 14 Mar 2019 06:43:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727101AbfCNGnt (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 14 Mar 2019 02:43:49 -0400
Received: from mail-pf1-f193.google.com ([209.85.210.193]:44045 "EHLO
        mail-pf1-f193.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727301AbfCNGng (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 14 Mar 2019 02:43:36 -0400
Received: by mail-pf1-f193.google.com with SMTP id a3so3167866pff.11
        for <kvm@vger.kernel.org>; Wed, 13 Mar 2019 23:43:35 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=Ebmk+NLAtdOtjqPKJKqOvCw/VBxQ6uvDNPKAjmLO1T0=;
        b=w979PRkQFqk+b+Jq9kZ/k9zDrSk4aW4Kp02xZ0LyM2CQg/LAlLvJnjWrJYbLVN4FXT
         FiVieIId0tuArOO45TNRxJTV5cP9UbhZCFsJsm7/DvhUoM7JYmZWA9kY5mtStUBV9cQq
         i98pkDc3/c/Ztwj8N8pgBKUR71SLSnTAmdeUd5JFGaqj2F4JyrA40JHj8au9ZO3LfFfc
         88ZH2JZDu7haUROjDW7YeMUZxoekMnMO/oBNTOPUdRgjQfuXXuYna/B9lnOT6NJ6IF+L
         tkkA46K3qSF/tXVALRKguiwBBij+LsIL7oEHWnUJyPCK4xPzicDfaD36aiaoYt2a3QLF
         EEbg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=Ebmk+NLAtdOtjqPKJKqOvCw/VBxQ6uvDNPKAjmLO1T0=;
        b=Qm+G0guITfcXyFqpLNVO4wuFqstLOrVPFjzTFc1UtOGJn4XzS3avL3afBQzNMgAbp6
         qGZuNfZA1rqA5LJ//xOYXS/X/JKoQoz+wkoRWQcZ++J471uvbua/cLCMROuoOXFxDBsv
         A8wif3B3fBg8SR0jy32JTqV/9TgLODUDO08I5raljq5AL+FDtWa/vOH9H1boMX3AGvzP
         xL0AUyyym9RGY6JbzeA+t4wgiPkY9Yta7W49qCHtbA5J6/gw2peDn4uCYASO9Dk3VMVb
         POGTyeoyVmmmjJTcOI7tTN0lQjIDi8thvpB4KEWhbuo7GjtXtjHZ87v6RayKNq4KCRDO
         dLXA==
X-Gm-Message-State: APjAAAXtP5kyvGw1SdkcsPpRA74SWQs94Lck2HG9zX5vS3tQEJQYhyHm
        vfac8SCmuafLb8cGEprfo365BQ==
X-Google-Smtp-Source: 
 APXvYqxdp7sRcU+LU7YkCmhXl977z6+p7v379LWu6cziYiQfhfJspurAB04t+oPamlU9aOMPdKasOw==
X-Received: by 2002:a17:902:361:: with SMTP id
 88mr50056390pld.78.1552545815420;
        Wed, 13 Mar 2019 23:43:35 -0700 (PDT)
Received: from localhost ([122.166.134.37])
        by smtp.gmail.com with ESMTPSA id
 g24sm1674461pfd.7.2019.03.13.23.43.34
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Wed, 13 Mar 2019 23:43:34 -0700 (PDT)
From: Viresh Kumar <viresh.kumar@linaro.org>
To: Rafael Wysocki <rjw@rjwysocki.net>, Paolo Bonzini <pbonzini@redhat.com>,
	=?utf-8?b?UmFkaW0gS3LEjW3DocWZ?= <rkrcmar@redhat.com>,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, "H. Peter Anvin" <hpa@zytor.com>,
 x86@kernel.org
Cc: Viresh Kumar <viresh.kumar@linaro.org>, linux-pm@vger.kernel.org,
        Vincent Guittot <vincent.guittot@linaro.org>,
        kvm@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 6/7] KVM: x86: Update cpufreq transition notifier to handle
 multiple CPUs
Date: Thu, 14 Mar 2019 12:12:52 +0530
Message-Id: 
 <adcf2b6e181d2ad2ab1b7038ba898eb4f4e53906.1552545525.git.viresh.kumar@linaro.org>
X-Mailer: git-send-email 2.21.0.rc0.269.g1a574e7a288b
In-Reply-To: <cover.1552545525.git.viresh.kumar@linaro.org>
References: <cover.1552545525.git.viresh.kumar@linaro.org>
MIME-Version: 1.0
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

The cpufreq core currently calls the cpufreq transition notifier
callback once for each affected CPU. This is going to change soon and
the cpufreq core will call the callback only once for each cpufreq
policy. The callback must look at the newly added field in struct
cpufreq_freqs, "cpus", which contains policy->related_cpus (both
online/offline CPUs) and perform per-cpu actions for them if any.

This patch updates kvmclock_cpufreq_notifier() to use the new "cpus"
field and perform the per-cpu activity for all online CPUs in this
cpumask.

Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
---
 arch/x86/kvm/x86.c | 31 ++++++++++++++++++++-----------
 1 file changed, 20 insertions(+), 11 deletions(-)

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 941f932373d0..24eb6123391d 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -6648,10 +6648,8 @@ static void kvm_hyperv_tsc_notifier(void)
 }
 #endif
 
-static int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long val,
-				     void *data)
+static void __kvmclock_cpufreq_notifier(struct cpufreq_freqs *freq, int cpu)
 {
-	struct cpufreq_freqs *freq = data;
 	struct kvm *kvm;
 	struct kvm_vcpu *vcpu;
 	int i, send_ipi = 0;
@@ -6695,17 +6693,12 @@ static int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long va
 	 *
 	 */
 
-	if (val == CPUFREQ_PRECHANGE && freq->old > freq->new)
-		return 0;
-	if (val == CPUFREQ_POSTCHANGE && freq->old < freq->new)
-		return 0;
-
-	smp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);
+	smp_call_function_single(cpu, tsc_khz_changed, freq, 1);
 
 	spin_lock(&kvm_lock);
 	list_for_each_entry(kvm, &vm_list, vm_list) {
 		kvm_for_each_vcpu(i, vcpu, kvm) {
-			if (vcpu->cpu != freq->cpu)
+			if (vcpu->cpu != cpu)
 				continue;
 			kvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);
 			if (vcpu->cpu != smp_processor_id())
@@ -6727,8 +6720,24 @@ static int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long va
 		 * guest context is entered kvmclock will be updated,
 		 * so the guest will not see stale values.
 		 */
-		smp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);
+		smp_call_function_single(cpu, tsc_khz_changed, freq, 1);
 	}
+}
+
+static int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long val,
+				     void *data)
+{
+	struct cpufreq_freqs *freq = data;
+	int cpu;
+
+	if (val == CPUFREQ_PRECHANGE && freq->old > freq->new)
+		return 0;
+	if (val == CPUFREQ_POSTCHANGE && freq->old < freq->new)
+		return 0;
+
+	for_each_cpu_and(cpu, freq->cpus, cpu_online_mask)
+		__kvmclock_cpufreq_notifier(freq, cpu);
+
 	return 0;
 }
 
