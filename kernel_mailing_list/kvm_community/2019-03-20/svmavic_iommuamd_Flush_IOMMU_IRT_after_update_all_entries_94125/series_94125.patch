From patchwork Wed Mar 20 08:14:56 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Patchwork-Submitter: "Suthikulpanit,
 Suravee" <Suravee.Suthikulpanit@amd.com>
X-Patchwork-Id: 10860993
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 1320715AC
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 20 Mar 2019 08:15:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EF46E2985E
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 20 Mar 2019 08:15:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E36F429A88; Wed, 20 Mar 2019 08:15:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 148D229816
	for <patchwork-kvm@patchwork.kernel.org>;
 Wed, 20 Mar 2019 08:15:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727818AbfCTIPD (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Wed, 20 Mar 2019 04:15:03 -0400
Received: from mail-eopbgr790072.outbound.protection.outlook.com
 ([40.107.79.72]:27220
        "EHLO NAM03-CO1-obe.outbound.protection.outlook.com"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1727770AbfCTIPD (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 20 Mar 2019 04:15:03 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=JkkYU78Bt/N1iwfIJoGDrMLNnFpDsvCrpKVneHArd5Q=;
 b=UgV1bniNO1lOH/IR4b0zc72zRwaeHEtOXUwU8nYOxHL2lObbxsMHvff0xsLe0OSPOvs8qBAzb5NOQAYjALB1YLW4Gt1OIf4h7rMjpBLq5DNG/McwrVyGv2YJerhyZvzZoIwhcN4X/g2aFE8tYk0JSw7EQMThInblXVwU33fciH4=
Received: from DM6PR12MB2844.namprd12.prod.outlook.com (20.176.117.96) by
 DM6PR12MB3386.namprd12.prod.outlook.com (20.178.198.81) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.1709.14; Wed, 20 Mar 2019 08:14:56 +0000
Received: from DM6PR12MB2844.namprd12.prod.outlook.com
 ([fe80::3589:a066:e1d:b1f0]) by DM6PR12MB2844.namprd12.prod.outlook.com
 ([fe80::3589:a066:e1d:b1f0%5]) with mapi id 15.20.1709.015; Wed, 20 Mar 2019
 08:14:56 +0000
From: "Suthikulpanit, Suravee" <Suravee.Suthikulpanit@amd.com>
To: "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
        "kvm@vger.kernel.org" <kvm@vger.kernel.org>,
        "iommu@lists.linux-foundation.org" <iommu@lists.linux-foundation.org>
CC: "joro@8bytes.org" <joro@8bytes.org>,
        "pbonzini@redhat.com" <pbonzini@redhat.com>,
        "rkrcmar@redhat.com" <rkrcmar@redhat.com>,
        "Suthikulpanit, Suravee" <Suravee.Suthikulpanit@amd.com>
Subject: [PATCH] svm/avic: iommu/amd: Flush IOMMU IRT after update all entries
Thread-Topic: [PATCH] svm/avic: iommu/amd: Flush IOMMU IRT after update all
 entries
Thread-Index: AQHU3vUARXY8SWi/JEK6MK8FzZYvQw==
Date: Wed, 20 Mar 2019 08:14:56 +0000
Message-ID: <20190320081432.2606-1-suravee.suthikulpanit@amd.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [171.96.73.208]
x-clientproxiedby: SG2PR06CA0100.apcprd06.prod.outlook.com
 (2603:1096:3:14::26) To DM6PR12MB2844.namprd12.prod.outlook.com
 (2603:10b6:5:45::32)
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Suravee.Suthikulpanit@amd.com;
x-ms-exchange-messagesentrepresentingtype: 1
x-mailer: git-send-email 2.17.1
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: af9b558f-a65f-4338-1f40-08d6ad0c2340
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: 
 BCL:0;PCL:0;RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600127)(711020)(4605104)(4618075)(2017052603328)(7153060)(7193020);SRVR:DM6PR12MB3386;
x-ms-traffictypediagnostic: DM6PR12MB3386:
x-microsoft-antispam-prvs: 
 <DM6PR12MB3386BEB4FF449F1FC58BA794F3410@DM6PR12MB3386.namprd12.prod.outlook.com>
x-forefront-prvs: 098291215C
x-forefront-antispam-report: 
 SFV:NSPM;SFS:(10009020)(366004)(346002)(39860400002)(376002)(136003)(396003)(199004)(189003)(386003)(2616005)(6512007)(97736004)(72206003)(99286004)(36756003)(68736007)(14454004)(486006)(186003)(478600001)(6486002)(316002)(26005)(53936002)(476003)(2501003)(6116002)(52116002)(6436002)(25786009)(6506007)(5660300002)(14444005)(71200400001)(2906002)(66574012)(102836004)(1076003)(66066001)(3846002)(71190400001)(15650500001)(305945005)(256004)(54906003)(81166006)(50226002)(106356001)(105586002)(8936002)(81156014)(110136005)(86362001)(2201001)(8676002)(7736002)(4326008);DIR:OUT;SFP:1101;SCL:1;SRVR:DM6PR12MB3386;H:DM6PR12MB2844.namprd12.prod.outlook.com;FPR:;SPF:None;LANG:en;PTR:InfoNoRecords;A:1;MX:1;
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam-message-info: 
 BWszz+brM/zgGPskPu/MmYhg1O6wE6BKMsg8BgY1IYZOUJzrnXs/aj1F65IYi4kUlCo0Zkxw4D2GlAQH73ENHr4cwN0nQCwLeMruGQOz5+uZV6A3NCDM1OSUILID0jNdlzgcLo781Q17BAWtgPGrPpDWbOPjseZ3TUYFc4Q7qvE2FXCzmYPNpfpf/ke/4azrwde+vpX1SxzAVuYcoSQ3X0vC+VTP/Ucamw74/UJ2cfU7xFS/4p60M9S47nftLiXgf++/8lQSk4opmUJOO8MDhtk9Z8+pR/R9aquZUzQJryZNOoDEwZ/Qq+JqDI6a0XcGHCa5lxw0lFEK3yq0r+ghkTdbXnQyt/NrWqxm2qBSLAos1OCA8uYc1GD4ttTOjca20Aag2vTZ/xVpJg3MkDPhSAo18auIpEKJKL5E4v4JGVk=
Content-Type: text/plain; charset="utf-8"
Content-ID: <CBA91A16F2DC4B4EA0139559B0D44A02@namprd12.prod.outlook.com>
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 af9b558f-a65f-4338-1f40-08d6ad0c2340
X-MS-Exchange-CrossTenant-originalarrivaltime: 20 Mar 2019 08:14:56.6044
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB3386
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

When AVIC is enabled and the VM has discrete device assignment,
the interrupt remapping table (IRT) is used to keep track of which
destination APIC ID the IOMMU will inject the device interrput to.

This means every time a vcpu is blocked or context-switched (i.e.
vcpu_blocking/unblocking() and vcpu_load/put()), the information
in IRT must be updated and the IOMMU IRT flush command must be
issued.

The current implementation flushes IOMMU IRT every time an entry
is modified. If the assigned device has large number of interrupts
(hence large number of entries), this would add large amount of
overhead to vcpu context-switch. Instead, this can be optmized by
only flush IRT once per vcpu context-switch per device after all
IRT entries are modified.

The function amd_iommu_update_ga() is refactored to only update
IRT entry, while the amd_iommu_sync_ga() is introduced to allow
IRT flushing to be done separately.

Cc: Joerg Roedel <joro@8bytes.org>
Cc: Radim Krčmář <rkrcmar@redhat.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
---
 arch/x86/kvm/svm.c        | 35 ++++++++++++++++++++++++++++++++++-
 drivers/iommu/amd_iommu.c | 20 +++++++++++++++++---
 include/linux/amd-iommu.h | 13 ++++++++++---
 3 files changed, 61 insertions(+), 7 deletions(-)

diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index 47c4993448c7..a5c7ca5d70d3 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -118,6 +118,8 @@ MODULE_DEVICE_TABLE(x86cpu, svm_cpu_id);
 #define AVIC_GATAG_TO_VMID(x)		((x >> AVIC_VCPU_ID_BITS) & AVIC_VM_ID_MASK)
 #define AVIC_GATAG_TO_VCPUID(x)		(x & AVIC_VCPU_ID_MASK)
 
+#define AVIC_DEVID_BITMAP_SIZE		(1 << 16)
+
 static bool erratum_383_found __read_mostly;
 
 static const u32 host_save_user_msrs[] = {
@@ -251,6 +253,12 @@ struct vcpu_svm {
 
 	/* which host CPU was used for running this vcpu */
 	unsigned int last_cpu;
+
+	/*
+	 * Bitmap used to store PCI devid to sync
+	 * AMD IOMMU interrupt remapping table
+	 */
+	unsigned long *avic_devid_sync_bitmap;
 };
 
 /*
@@ -1984,6 +1992,7 @@ static inline int
 avic_update_iommu_vcpu_affinity(struct kvm_vcpu *vcpu, int cpu, bool r)
 {
 	int ret = 0;
+	int devid = 0;
 	unsigned long flags;
 	struct amd_svm_iommu_ir *ir;
 	struct vcpu_svm *svm = to_svm(vcpu);
@@ -2001,9 +2010,21 @@ avic_update_iommu_vcpu_affinity(struct kvm_vcpu *vcpu, int cpu, bool r)
 		goto out;
 
 	list_for_each_entry(ir, &svm->ir_list, node) {
-		ret = amd_iommu_update_ga(cpu, r, ir->data);
+		ret = amd_iommu_update_ga(cpu, r, ir->data, &devid);
 		if (ret)
 			break;
+		set_bit(devid, svm->avic_devid_sync_bitmap);
+	}
+
+	/* Sync AMD IOMMU interrupt remapping table changes for each device. */
+	devid = find_next_bit(svm->avic_devid_sync_bitmap,
+			      AVIC_DEVID_BITMAP_SIZE, 0);
+
+	while (devid < AVIC_DEVID_BITMAP_SIZE) {
+		clear_bit(devid, svm->avic_devid_sync_bitmap);
+		ret = amd_iommu_sync_ga(devid);
+		devid = find_next_bit(svm->avic_devid_sync_bitmap,
+				      AVIC_DEVID_BITMAP_SIZE, devid+1);
 	}
 out:
 	spin_unlock_irqrestore(&svm->ir_list_lock, flags);
@@ -2107,6 +2128,13 @@ static int avic_init_vcpu(struct vcpu_svm *svm)
 	INIT_LIST_HEAD(&svm->ir_list);
 	spin_lock_init(&svm->ir_list_lock);
 
+	svm->avic_devid_sync_bitmap = (void *)__get_free_pages(
+					GFP_KERNEL | __GFP_ZERO,
+					get_order(AVIC_DEVID_BITMAP_SIZE/8));
+	if (svm->avic_devid_sync_bitmap == NULL)
+		ret = -ENOMEM;
+	memset(svm->avic_devid_sync_bitmap, 0, AVIC_DEVID_BITMAP_SIZE/8);
+
 	return ret;
 }
 
@@ -2221,6 +2249,11 @@ static void svm_free_vcpu(struct kvm_vcpu *vcpu)
 	__free_pages(virt_to_page(svm->msrpm), MSRPM_ALLOC_ORDER);
 	__free_page(virt_to_page(svm->nested.hsave));
 	__free_pages(virt_to_page(svm->nested.msrpm), MSRPM_ALLOC_ORDER);
+
+	free_pages((unsigned long)svm->avic_devid_sync_bitmap,
+		   get_order(AVIC_DEVID_BITMAP_SIZE/8));
+	svm->avic_devid_sync_bitmap = NULL;
+
 	kvm_vcpu_uninit(vcpu);
 	kmem_cache_free(x86_fpu_cache, svm->vcpu.arch.guest_fpu);
 	kmem_cache_free(kvm_vcpu_cache, svm);
diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index 2a7b78bb98b4..637bcc9192e5 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -4499,7 +4499,20 @@ int amd_iommu_create_irq_domain(struct amd_iommu *iommu)
 	return 0;
 }
 
-int amd_iommu_update_ga(int cpu, bool is_run, void *data)
+int amd_iommu_sync_ga(int devid)
+{
+	struct amd_iommu *iommu = amd_iommu_rlookup_table[devid];
+
+	if (!iommu)
+		return -ENODEV;
+
+	iommu_flush_irt(iommu, devid);
+	iommu_completion_wait(iommu);
+	return 0;
+}
+EXPORT_SYMBOL(amd_iommu_sync_ga);
+
+int amd_iommu_update_ga(int cpu, bool is_run, void *data, int *id)
 {
 	unsigned long flags;
 	struct amd_iommu *iommu;
@@ -4521,6 +4534,9 @@ int amd_iommu_update_ga(int cpu, bool is_run, void *data)
 	if (!table)
 		return -ENODEV;
 
+	if (id)
+		*id = devid;
+
 	raw_spin_lock_irqsave(&table->lock, flags);
 
 	if (ref->lo.fields_vapic.guest_mode) {
@@ -4536,8 +4552,6 @@ int amd_iommu_update_ga(int cpu, bool is_run, void *data)
 
 	raw_spin_unlock_irqrestore(&table->lock, flags);
 
-	iommu_flush_irt(iommu, devid);
-	iommu_completion_wait(iommu);
 	return 0;
 }
 EXPORT_SYMBOL(amd_iommu_update_ga);
diff --git a/include/linux/amd-iommu.h b/include/linux/amd-iommu.h
index 09751d349963..b94d4b33dfd7 100644
--- a/include/linux/amd-iommu.h
+++ b/include/linux/amd-iommu.h
@@ -193,8 +193,9 @@ static inline int amd_iommu_detect(void) { return -ENODEV; }
 /* IOMMU AVIC Function */
 extern int amd_iommu_register_ga_log_notifier(int (*notifier)(u32));
 
-extern int
-amd_iommu_update_ga(int cpu, bool is_run, void *data);
+extern int amd_iommu_update_ga(int cpu, bool is_run, void *data, int *devid);
+
+extern int amd_iommu_sync_ga(int devid);
 
 #else /* defined(CONFIG_AMD_IOMMU) && defined(CONFIG_IRQ_REMAP) */
 
@@ -205,7 +206,13 @@ amd_iommu_register_ga_log_notifier(int (*notifier)(u32))
 }
 
 static inline int
-amd_iommu_update_ga(int cpu, bool is_run, void *data)
+amd_iommu_update_ga(int cpu, bool is_run, void *data, int *devid)
+{
+	return 0;
+}
+
+static inline int
+amd_iommu_sync_ga(int devid)
 {
 	return 0;
 }
