From patchwork Fri Mar 22 05:23:08 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Leo Yan <leo.yan@linaro.org>
X-Patchwork-Id: 10864913
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id 9D8DF1669
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Mar 2019 05:23:30 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 84DD72A5D4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Mar 2019 05:23:30 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7836B2A5E2; Fri, 22 Mar 2019 05:23:30 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-8.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,MAILING_LIST_MULTI,RCVD_IN_DNSWL_HI autolearn=ham
	version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1F4D12A5D4
	for <patchwork-kvm@patchwork.kernel.org>;
 Fri, 22 Mar 2019 05:23:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727803AbfCVFX2 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Fri, 22 Mar 2019 01:23:28 -0400
Received: from mail-yw1-f65.google.com ([209.85.161.65]:44174 "EHLO
        mail-yw1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727789AbfCVFX1 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 22 Mar 2019 01:23:27 -0400
Received: by mail-yw1-f65.google.com with SMTP id c4so904082ywa.11
        for <kvm@vger.kernel.org>; Thu, 21 Mar 2019 22:23:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=linaro.org; s=google;
        h=from:to:cc:subject:date:message-id;
        bh=ESbHL+W3HFRMERrK6qlVTdoJpPfKuzJ5cOEPLw5t538=;
        b=Kn52KpKgO+5ZfWRoaCa4FQHzgFTUi9y/9N+cQOmEeT7OudxLQYlgR1xcgF+78bE80V
         W7QNFWDzIFNNFdoYAjE0MY6idYzINEzi4lTF9pCrdrQCfIzgPmlXlId+qih4+eyb8Yri
         3OA/ta56yqE8UkqRp4aB7qajBymoUN6yP+hCTPcpAYjEoVIb89mup3+QAVtGJMuBxIAM
         LKUVlFHF7G0ahfM7m+eQEbG1LttgxDlGAy5GCobCkQiSknGgemWZSrRJKLlmfPmjrvZo
         muYlkBqvnmgKlbc3qznrkeDDh9rLTwtnbrh/R3vg53sfJfVJ4nrKYh3VEuq6gpuCVXG4
         CSFA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id;
        bh=ESbHL+W3HFRMERrK6qlVTdoJpPfKuzJ5cOEPLw5t538=;
        b=iqtBxi2H26+yJqh4YsLgiEeONT+t5vVf0be8fmwOToMjJBicrYaIXz5NJwYeTnWNBZ
         JUkB9Kmk9ec/KXXE9SIBUU2Z+t/SqMegU70LKEQ/hpV3+h6bXoE6Hm4s9goIURbust3p
         mVeRmSEk+bZmAOD1DZOa6x+uCvtGBpd4OtcbY+4qpt2ahHjGiaB3dv7sWjMgHVux2PA3
         oE7eOqiK9YZFSfYuiLZRWyHoC1nePBP72a+UCny8tMfFINnI4CDFAePTzAlCOIz/a4Ih
         pJngJsXoII+qAuX8p+4MnKr0oNKoqGsBr/TNIm6URQo6XzJf5WgiHdGHZUOGmSAL5gjB
         I7TA==
X-Gm-Message-State: APjAAAV5FQacYiYC4hsxQqhCWj76rKg2VwNjL1px75fcLAwEfIX4TKnE
        JqjseYxc0/ck0rjcaynxc3Y6lE+Wa0w=
X-Google-Smtp-Source: 
 APXvYqzwLUJlLWIqjmvM86XT+0tgP63ONZ7USJ05UQdKFBJodzS8F4AB6nlqnf1dxZVsfo1AQqOFjQ==
X-Received: by 2002:a81:5489:: with SMTP id
 i131mr6406679ywb.459.1553232206483;
        Thu, 21 Mar 2019 22:23:26 -0700 (PDT)
Received: from localhost.localdomain (li931-65.members.linode.com.
 [45.56.113.65])
        by smtp.gmail.com with ESMTPSA id
 f185sm3500064ywf.18.2019.03.21.22.23.22
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 21 Mar 2019 22:23:25 -0700 (PDT)
From: Leo Yan <leo.yan@linaro.org>
To: kvm@vger.kernel.org, kvmarm@lists.cs.columbia.edu,
        Will Deacon <will.deacon@arm.com>,
        Marc Zyngier <marc.zyngier@arm.com>,
        Jean-Philippe Brucker <jean-philippe.brucker@arm.com>,
        Eric Auger <eric.auger@redhat.com>,
        Robin Murphy <robin.murphy@arm.com>
Cc: Leo Yan <leo.yan@linaro.org>
Subject: [PATCH] vfio-pci: Fix MSI IRQ forwarding for without per-vector
 masking
Date: Fri, 22 Mar 2019 13:23:08 +0800
Message-Id: <20190322052308.28254-1-leo.yan@linaro.org>
X-Mailer: git-send-email 2.17.1
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

If MSI doesn't support per-vector masking capability and
PCI_MSI_FLAGS_MASKBIT isn't set in message control field, the function
vfio_pci_msi_vector_write() will directly bail out for this case and
every vector's 'virt_state' keeps setting bit VFIO_PCI_MSI_STATE_MASKED.

This results in the state maintained in 'virt_state' cannot really
reflect the MSI hardware state; finally it will mislead the function
vfio_pci_update_msi_entry() to skip IRQ forwarding with below flow:

vfio_pci_update_msi_entry() {

  [...]

  if (msi_is_masked(entry->virt_state) == msi_is_masked(entry->phys_state))
      return 0;  ==> skip IRQ forwarding

  [...]
}

To fix this issue, when detect PCI_MSI_FLAGS_MASKBIT is not set in the
message control field, this patch simply clears bit
VFIO_PCI_MSI_STATE_MASKED for all vectors 'virt_state'; at the end
vfio_pci_update_msi_entry() can forward MSI IRQ successfully.

Signed-off-by: Leo Yan <leo.yan@linaro.org>
---
 vfio/pci.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/vfio/pci.c b/vfio/pci.c
index ba971eb..4fd24ac 100644
--- a/vfio/pci.c
+++ b/vfio/pci.c
@@ -363,8 +363,18 @@ static int vfio_pci_msi_vector_write(struct kvm *kvm, struct vfio_device *vdev,
 	struct vfio_pci_device *pdev = &vdev->pci;
 	struct msi_cap_64 *msi_cap_64 = PCI_CAP(&pdev->hdr, pdev->msi.pos);
 
-	if (!(msi_cap_64->ctrl & PCI_MSI_FLAGS_MASKBIT))
+	if (!(msi_cap_64->ctrl & PCI_MSI_FLAGS_MASKBIT)) {
+		/*
+		 * If MSI doesn't support per-vector masking capability,
+		 * simply unmask for all vectors.
+		 */
+		for (i = 0; i < pdev->msi.nr_entries; i++) {
+			entry = &pdev->msi.entries[i];
+			msi_set_masked(entry->virt_state, false);
+		}
+
 		return 0;
+	}
 
 	if (msi_cap_64->ctrl & PCI_MSI_FLAGS_64BIT)
 		mask_pos = PCI_MSI_MASK_64;
